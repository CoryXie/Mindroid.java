page.title=Storage Options
@jd:body


<div id="qv-wrapper">
<div id="qv">

  <h2>Storage quickview</h2>
  <ul>
    <li>Use Shared Preferences for primitive data</li>
    <li>Use internal device storage for private data</li>
  </ul>

  <h2>In this document</h2>
  <ol>
    <li><a href="#pref">Using Shared Preferences</a></li>
    <li><a href="#filesInternal">Using the Internal Storage</a></li>
    <li><a href="#netw">Using a Network Connection</a></li>
  </ol>

</div>
</div>

<p>Mindroid provides several options for you to save persistent application data. The solution you
choose depends on your specific needs.
</p>

<p>Your data storage options are the following:</p>

<dl>
  <dt><a href="#pref">Shared Preferences</a></dt>
    <dd>Store private primitive data in key-value pairs.</dd>
  <dt><a href="#filesInternal">Internal Storage</a></dt>
    <dd>Store private data on the device memory.</dd>
  <dt><a href="#netw">Network Connection</a></dt>
    <dd>Store data on the web with your own network server.</dd>
</dl>




<h2 id="pref">Using Shared Preferences</h2>

<p>The {@link mindroid.content.SharedPreferences} class provides a general framework that allows you
to save and retrieve persistent key-value pairs of primitive data types. You can use {@link
mindroid.content.SharedPreferences} to save any primitive data: booleans, floats, ints, longs, and
strings. This data will persist across sessions (even if your application is killed).</p>


<p>To get a {@link mindroid.content.SharedPreferences} object for your application, use the
following method:</p>
<ul>
  <li>{@link mindroid.content.Context#getSharedPreferences(String,int)
getSharedPreferences()} - Use this if you need multiple preferences files identified by name,
which you specify with the first parameter.</li>
</ul>

<p>To write values:</p>
<ol>
  <li>Call {@link mindroid.content.SharedPreferences#edit()} to get a {@link
mindroid.content.SharedPreferences.Editor}.</li>
  <li>Add values with methods such as {@link
mindroid.content.SharedPreferences.Editor#putBoolean(String,boolean) putBoolean()} and {@link
mindroid.content.SharedPreferences.Editor#putString(String,String) putString()}.</li>
  <li>Commit the new values with {@link mindroid.content.SharedPreferences.Editor#commit()}</li>
</ol>

<p>To read values, use {@link mindroid.content.SharedPreferences} methods such as {@link
mindroid.content.SharedPreferences#getBoolean(String,boolean) getBoolean()} and {@link
mindroid.content.SharedPreferences#getString(String,String) getString()}.</p>

<p>
Here is an example that saves a preference for the phone mode in a
telephony application:
</p>

<pre>
public class Telephony extends Service {
    public static final String PREFS_NAME = "MyPrefsFile";

    public void onCreate() {
        . . .

        // Restore preferences
        SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
        boolean phoneMode = settings.getBoolean("phoneMode", false);
        setPhoneMode(phoneMode);
    }

    public void onDestroy() {
        // We need an Editor object to make preference changes.
        // All objects are from mindroid.context.Context
        SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
        SharedPreferences.Editor editor = settings.edit();
        editor.putBoolean("phoneMode", mPhoneMode);

        // Commit the edits!
        editor.commit();
    }
}
</pre>




<a name="files"></a>
<h2 id="filesInternal">Using the Internal Storage</h2>

<p>You can save files directly on the device's internal storage.</p>

<p>To create and write a file to the internal storage:</p>

<ol>
  <li>Call {@link mindroid.content.Context#openFileOutput(String,int) openFileOutput()} with the
name of the file and the operating mode. This returns a {@link java.io.FileOutputStream}.</li>
  <li>Write to the file with {@link java.io.FileOutputStream#write(byte[]) write()}.</li>
  <li>Close the stream with {@link java.io.FileOutputStream#close()}.</li>
</ol>

<p>For example:</p>

<pre>
String FILENAME = "HelloWorld.txt";
String string = "Hello World!";

FileOutputStream fos = openFileOutput(FILENAME, 0);
fos.write(string.getBytes());
fos.close();
</pre>

<p>To read a file from internal storage:</p>

<ol>
  <li>Call {@link mindroid.content.Context#openFileInput openFileInput()} and pass it the
name of the file to read. This returns a {@link java.io.FileInputStream}.</li>
  <li>Read bytes from the file with {@link java.io.FileInputStream#read(byte[],int,int)
read()}.</li>
  <li>Then close the stream with  {@link java.io.FileInputStream#close()}.</li>
</ol>



<h2 id="netw">Using a Network Connection</h2>

<!-- TODO MAKE THIS USEFUL!! -->

<p>You can use the network (when it's available) to store and retrieve data on your own web-based
services. To do network operations, use classes in the following packages:</p>

<ul class="no-style">
  <li><code>{@link java.net java.net.*}</code></li>
</ul>
